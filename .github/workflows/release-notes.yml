name: Generate App Store Release Notes

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag to generate notes for"
        required: false
        default: "latest"

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    # Add permissions for releases
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Generate App Store Release Notes
        id: release_notes
        uses: ./ # Or your published action path like: your-username/app-store-release-notes@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          release_tag: ${{ github.event.inputs.release_tag || 'latest' }}
          max_length: "450"

      - name: Display Generated Release Notes
        run: |
          echo "English Release Notes:"
          echo "${{ steps.release_notes.outputs.en_release_notes }}"
          echo "---------------------------------------"
          echo "Swedish Release Notes:"
          echo "${{ steps.release_notes.outputs.sv_release_notes }}"
          echo "---------------------------------------"
          echo "French Release Notes:"
          echo "${{ steps.release_notes.outputs.fr_release_notes }}"

      - name: Save Release Notes
        run: |
          mkdir -p release-notes

          # Create a combined version with markdown formatting
          {
            echo "# Combined Release Notes"
            echo ""
            echo "## English"
            echo ""
            echo "${{ steps.release_notes.outputs.en_release_notes }}"
            echo ""
            echo "## Swedish"
            echo ""
            echo "${{ steps.release_notes.outputs.sv_release_notes }}"
            echo ""
            echo "## French"
            echo ""
            echo "${{ steps.release_notes.outputs.fr_release_notes }}"
          } > release-notes/combined.md

      - name: Upload Release Notes to Release Assets
        run: |
          TAG_NAME="${{ github.event.inputs.release_tag || github.event.release.tag_name || 'latest' }}"
          if [ "$TAG_NAME" = "latest" ]; then
            TAG_NAME=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          fi
          echo "Uploading release notes to tag: $TAG_NAME"
          gh release upload "$TAG_NAME" release-notes/combined.md --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
