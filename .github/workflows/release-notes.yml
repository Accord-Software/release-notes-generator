name: Generate App Store Release Notes

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag to generate notes for"
        required: false
        default: "latest"
      languages:
        description: "Comma-separated list of language codes (e.g., en,sv,fr,de)"
        required: false
        default: "en,sv,fr"

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    # Add permissions for releases
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Generate App Store Release Notes
        id: release_notes
        uses: ./ # Or your published action path like: your-username/app-store-release-notes@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          release_tag: ${{ github.event.inputs.release_tag || 'latest' }}
          max_length: "450"
          languages: ${{ github.event.inputs.languages || 'en,sv,fr' }}

      - name: Parse Result
        id: parse_result
        run: |
          # Parse the JSON output and set individual language outputs
          RELEASE_NOTES='${{ steps.release_notes.outputs.release_notes }}'
          LANGUAGES="${{ steps.release_notes.outputs.language_codes }}"

          echo "Generated release notes for: $LANGUAGES"

          # Display the notes for each language
          for LANG in $(echo $LANGUAGES | tr ',' ' '); do
            # Extract the notes for this language
            LANG_NOTES=$(echo "$RELEASE_NOTES" | jq -r --arg lang "$LANG" '.[$lang]')
            echo "========================================"
            echo "$LANG Release Notes:"
            echo "$LANG_NOTES"
            echo "========================================"
          done

      - name: Save Release Notes
        run: |
          mkdir -p release-notes
          RELEASE_NOTES='${{ steps.release_notes.outputs.release_notes }}'
          LANGUAGES="${{ steps.release_notes.outputs.language_codes }}"

          # Save combined markdown file
          echo "# Combined Release Notes" > release-notes/combined.md
          echo "" >> release-notes/combined.md

          # Add each language to the markdown
          for LANG in $(echo $LANGUAGES | tr ',' ' '); do
            # Extract the notes for this language
            LANG_NOTES=$(echo "$RELEASE_NOTES" | jq -r --arg lang "$LANG" '.[$lang]')
            LANG_UPPER=$(echo "$LANG" | tr '[:lower:]' '[:upper:]')
            echo "## $LANG_UPPER" >> release-notes/combined.md
            echo "" >> release-notes/combined.md
            echo "$LANG_NOTES" >> release-notes/combined.md
            echo "" >> release-notes/combined.md
            
            # Also save individual language files
            echo "$LANG_NOTES" > "release-notes/$LANG.txt"
          done

      - name: Upload Release Notes to Release Assets
        run: |
          TAG_NAME="${{ github.event.inputs.release_tag || github.event.release.tag_name || 'latest' }}"
          if [ "$TAG_NAME" = "latest" ]; then
            TAG_NAME=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          fi
          echo "Uploading release notes to tag: $TAG_NAME"
          gh release upload "$TAG_NAME" release-notes/combined.md --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
